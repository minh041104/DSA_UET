#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int MAXN = 1005;

vector<int> adj[MAXN];
int depth[MAXN];

void dfs(int u, int p) {
    for (int v : adj[u]) {
        if (v != p) {
            depth[v] = depth[u] + 1;
            dfs(v, u);
        }
    }
}

int main() {
    int n;
    cin >> n;

    for (int i = 0; i < n-1; i++) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    depth[0] = 0;
    dfs(0, -1);

    int max_depth = *max_element(depth, depth+n);
    cout << max_depth << endl;

    return 0;
}
